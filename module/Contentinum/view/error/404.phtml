<?php
if ($this->customError) {
    $groupstyles = $this->groupstyles['styles'];
    $htmlwidgets = $this->htmlwidgets['widgets'];
    $contentstyles = $this->contentstyles['contribution'];
    $content = '';
    $html = '';
    $it = 1;
    foreach ($this->entries as $row) {
        if (isset($groupstyles[$row['groupStyle']]) && ($viewHelper = $groupstyles[$row['groupStyle']]->viewhelper)) {
            $content = $this->$viewHelper($row, $groupstyles[$row['groupStyle']]->toArray(), $this->medias, $contentstyles);
        } else {
            $content = $this->contribution($row, $this->medias, $contentstyles);
        }
        switch ($row['htmlwidgets']) {
            case 'none':
                $html[$row['adjustments']][$row['url']][] = $content;
                break;
            default:
                $html[$row['adjustments']][$row['url']][] = $this->contentrow($row, $content, $htmlwidgets);
                break;
        }
        $it ++;
    }
    $mcontent = implode(' ', $html['CONTENT']['error']);
    $this->layoutassets($this->htmllayouts, $this->templateKey);
    $layout = $this->buildlayout($this->htmllayouts, $this->templateKey,$this->htmlassets);
    foreach ($layout as $row) {
        if (is_array($row)) {
            foreach ($row as $k => $v) {
                switch ($k) {
                    case 'assign':
                        $assign = explode(';', $v);
                        foreach ($assign as $value) {
                            if ('allcontent' == $value) {
                                echo "\n" . $mcontent;
                            } else {
                                echo "\n" . $this->$value;
                            }
                        }
                        break;
                    default:
                }
            }
        } else {
            echo "\n" . $row;
        }
    }
} else {
    
    echo '<h1>' . $this->translate('A 404 error occurred') . '</h1>';
    echo '<h2>' . $this->message . '</h2>';
    
    if (isset($this->reason) && $this->reason) {
        
        $reasonMessage = '';
        switch ($this->reason) {
            case 'error-controller-cannot-dispatch':
                $reasonMessage = $this->translate('The requested controller was unable to dispatch the request.');
                break;
            case 'error-controller-not-found':
                $reasonMessage = $this->translate('The requested controller could not be mapped to an existing controller class.');
                break;
            case 'error-controller-invalid':
                $reasonMessage = $this->translate('The requested controller was not dispatchable.');
                break;
            case 'error-router-no-match':
                $reasonMessage = $this->translate('The requested URL could not be matched by routing.');
                break;
            default:
                $reasonMessage = $this->translate('We cannot determine at this time why a 404 was generated.');
                break;
        }
        echo '<p>' . $reasonMessage . '</p>';
    }
    
    if (isset($this->controller) && $this->controller) {
        
        echo '<dl><dt>' . $this->translate('Controller') . '</dt>';
        echo '<dd>' . $this->escapeHtml($this->controller) . '';
        
        if (isset($this->controller_class) && $this->controller_class && $this->controller_class != $this->controller) {
            echo '(' . sprintf($this->translate('resolves to %s'), $this->escapeHtml($this->controller_class)) . ')';
        }
        
        echo '</dd></dl>';
    }
    
    if (isset($this->display_exceptions) && $this->display_exceptions) {
        if (isset($this->exception) && $this->exception instanceof Exception) {
            echo '<hr />';
            echo '<h2>' . $this->translate('Additional information') . '</h2>';
            echo '<h3>' . get_class($this->exception) . '</h3>';
            
            echo '<dl><dt>' . $this->translate('File') . '</dt>';
            echo '<dd><pre class="prettyprint linenums">' . $this->exception->getFile() . ':' . $this->exception->getLine() . '</pre></dd>';
            echo '<dt>' . $this->translate('Message') . ' :</dt><dd>';
            echo '<pre class="prettyprint linenums">' . $this->exception->getMessage() . '</pre></dd>';
            echo '<dt>' . $this->translate('Stack trace') . ' :</dt><dd>';
            echo '<pre class="prettyprint linenums">' . $this->exception->getTraceAsString() . '</pre></dd></dl>';
            
            $e = $this->exception->getPrevious();
            if ($e) {
                
                echo '<hr /><h2>' . $this->translate('Previous exceptions') . ':</h2>';
                echo '<ul class="unstyled">';
                while ($e) {
                    echo '<li><h3>' . get_class($e) . '</h3><dl>';
                    echo '<dt>' . $this->translate('File') . ':</dt>';
                    echo '<dd><pre class="prettyprint linenums">' . $e->getFile() . ' : ' . $e->getLine() . '</pre>';
                    echo '</dd><dt>' . $this->translate('Message') . ' :</dt>';
                    echo '<dd><pre class="prettyprint linenums">' . $e->getMessage() . '</pre></dd>';
                    echo '<dt>' . $this->translate('Stack trace') . ' :</dt>';
                    echo '<dd><pre class="prettyprint linenums">' . $e->getTraceAsString() . '</pre></dd>';
                    echo '</dl></li>';
                    
                    $e = $e->getPrevious();
                }
                echo '</ul>';
            } else {
                echo '<h3>' . $this->translate('No Exception available') . '</h3>';
            }
        }
    }
}
?>